'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _actionTypes = require('../action-types');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

var _partition3 = require('lodash/partition');

var _partition4 = _interopRequireDefault(_partition3);

var _every = require('lodash/every');

var _every2 = _interopRequireDefault(_every);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function batch(model, actions) {
  if ((0, _every2.default)(actions, function (action) {
    return typeof action !== 'function';
  })) {
    return {
      type: _actionTypes2.default.BATCH,
      model: model,
      actions: actions
    };
  }

  return function (dispatch) {
    var _partition = (0, _partition4.default)(actions, function (action) {
      return typeof action !== 'function';
    });

    var _partition2 = _slicedToArray(_partition, 2);

    var plainActions = _partition2[0];
    var actionThunks = _partition2[1];


    dispatch({
      type: _actionTypes2.default.BATCH,
      model: model,
      actions: plainActions
    });

    actionThunks.map(dispatch);
  };
}

exports.default = {
  batch: batch
};