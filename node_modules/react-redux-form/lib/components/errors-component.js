'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _connect = require('react-redux/lib/components/connect');

var _connect2 = _interopRequireDefault(_connect);

var _get2 = require('../utils/get');

var _get3 = _interopRequireDefault(_get2);

var _map = require('lodash/map');

var _map2 = _interopRequireDefault(_map);

var _compact = require('lodash/compact');

var _compact2 = _interopRequireDefault(_compact);

var _baseIteratee = require('lodash/_baseIteratee');

var _baseIteratee2 = _interopRequireDefault(_baseIteratee);

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function showErrors(field, form) {
  var show = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

  if (typeof show === 'function') {
    return show(field, form);
  }

  if (!(0, _isArray2.default)(show) && (typeof show === 'undefined' ? 'undefined' : _typeof(show)) !== 'object' && typeof show !== 'string') {
    return !!show;
  }

  return (0, _baseIteratee2.default)(show)(field);
}

var Errors = function (_Component) {
  _inherits(Errors, _Component);

  function Errors() {
    _classCallCheck(this, Errors);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Errors).apply(this, arguments));
  }

  _createClass(Errors, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(_ref) {
      var fieldValue = _ref.fieldValue;
      var formValue = _ref.formValue;

      return fieldValue !== this.props.fieldValue || formValue !== this.props.formValue;
    }
  }, {
    key: 'mapErrorMessages',
    value: function mapErrorMessages(errors) {
      var _this2 = this;

      var messages = this.props.messages;


      if (typeof errors === 'string') {
        return this.renderError(errors, 'error');
      }

      if (!errors) return null;

      var mappedErrors = (0, _compact2.default)((0, _map2.default)(errors, function (error, key) {
        var message = messages[key];

        if (error) {
          if (message) {
            return _this2.renderError(message, key);
          } else if (typeof error === 'string') {
            return _this2.renderError(error, key);
          } else if ((0, _isPlainObject2.default)(error)) {
            return _this2.mapErrorMessages(error);
          }
        }

        return false;
      })).reduce(function (a, b) {
        return a.concat(b);
      }, []);

      if (!mappedErrors.length) return null;

      return mappedErrors;
    }
  }, {
    key: 'renderError',
    value: function renderError(message, key) {
      var _props = this.props;
      var component = _props.component;
      var model = _props.model;
      var modelValue = _props.modelValue;
      var fieldValue = _props.fieldValue;


      var errorProps = {
        key: key,
        model: model,
        modelValue: modelValue,
        fieldValue: fieldValue
      };

      var messageString = typeof message === 'function' ? message(modelValue) : message;

      if (!messageString) return null;

      var allowedProps = typeof component === 'function' ? errorProps : { key: key };

      return _react2.default.createElement(component, allowedProps, messageString);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props;
      var fieldValue = _props2.fieldValue;
      var _props2$fieldValue = _props2.fieldValue;
      var valid = _props2$fieldValue.valid;
      var errors = _props2$fieldValue.errors;
      var formValue = _props2.formValue;
      var show = _props2.show;
      var wrapper = _props2.wrapper;


      var allowedProps = typeof wrapper === 'function' ? this.props : (0, _omit2.default)(this.props, Object.keys(Errors.propTypes));

      if (!showErrors(fieldValue, formValue, show)) {
        return null;
      }

      var errorMessages = valid ? null : this.mapErrorMessages(errors);

      if (!errorMessages) return null;

      return _react2.default.createElement(wrapper, allowedProps, errorMessages);
    }
  }]);

  return Errors;
}(_react.Component);

Errors.propTypes = {
  // Computed props
  modelValue: _react.PropTypes.any,
  formValue: _react.PropTypes.object,
  fieldValue: _react.PropTypes.object,

  // Provided props
  model: _react.PropTypes.string.isRequired,
  messages: _react.PropTypes.objectOf(_react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func, _react.PropTypes.bool])),
  show: _react.PropTypes.any,
  wrapper: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func, _react.PropTypes.element]),
  component: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func, _react.PropTypes.element]),
  dispatch: _react.PropTypes.func
};

Errors.defaultProps = {
  wrapper: 'div',
  component: 'span',
  messages: {},
  show: true
};

function mapStateToProps(state, _ref2) {
  var model = _ref2.model;

  var modelString = typeof model === 'function' ? model(state) : model;

  var formValue = (0, _utils.getForm)(state, modelString);
  var fieldValue = (0, _utils.getFieldFromState)(state, modelString);

  return {
    model: modelString,
    modelValue: (0, _get3.default)(state, modelString),
    formValue: formValue,
    fieldValue: fieldValue
  };
}

exports.default = (0, _connect2.default)(mapStateToProps)(Errors);