'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _connect = require('react-redux/lib/components/connect');

var _connect2 = _interopRequireDefault(_connect);

var _shallowEqual = require('../utils/shallow-equal');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

var _get2 = require('../utils/get');

var _get3 = _interopRequireDefault(_get2);

var _merge = require('../utils/merge');

var _merge2 = _interopRequireDefault(_merge);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _utils = require('../utils');

var _sequence = require('../utils/sequence');

var _actions = require('../actions');

var _actions2 = _interopRequireDefault(_actions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function mapStateToProps(state, props) {
  var model = props.model;
  var mapProps = props.mapProps;


  if (!mapProps) return props;

  var modelString = typeof model === 'function' ? model(state) : model;
  var fieldValue = (0, _utils.getFieldFromState)(state, modelString);

  return {
    model: model,
    modelValue: (0, _get3.default)(state, modelString),
    fieldValue: fieldValue
  };
}

var Control = function (_Component) {
  _inherits(Control, _Component);

  function Control(props) {
    _classCallCheck(this, Control);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Control).call(this, props));

    var controlProps = props.controlProps;
    var mapProps = props.mapProps;


    _this.handleKeyPress = _this.handleKeyPress.bind(_this);

    _this.state = {
      value: props.modelValue,
      mappedProps: mapProps(_extends({}, props, controlProps, (0, _sequence.sequenceEventActions)(props)))
    };
    return _this;
  }

  _createClass(Control, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var modelValue = this.props.modelValue;
      var onLoad = this.state.mappedProps.onLoad;


      if (onLoad) {
        onLoad(modelValue);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var mapProps = nextProps.mapProps;


      this.setState({
        mappedProps: mapProps(_extends({}, nextProps, nextProps.controlProps, (0, _sequence.sequenceEventActions)(nextProps)))
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _props = this.props;
      var modelValue = _props.modelValue;
      var fieldValue = _props.fieldValue;
      var validateOn = _props.validateOn;


      if (fieldValue && !fieldValue.validated && modelValue !== prevProps.modelValue && validateOn === 'change') {
        this.validate();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var _props2 = this.props;
      var model = _props2.model;
      var fieldValue = _props2.fieldValue;
      var dispatch = _props2.dispatch;


      if (!fieldValue) return;

      if (!fieldValue.valid) {
        dispatch(_actions2.default.resetValidity(model));
      }
    }
  }, {
    key: 'handleKeyPress',
    value: function handleKeyPress(event) {
      var onSubmit = this.state.mappedProps.onSubmit;


      if (onSubmit && event.key === 'Enter') {
        onSubmit(event);
      }
    }
  }, {
    key: 'validate',
    value: function validate() {
      var _props3 = this.props;
      var model = _props3.model;
      var modelValue = _props3.modelValue;
      var fieldValue = _props3.fieldValue;
      var validators = _props3.validators;
      var errorValidators = _props3.errors;
      var dispatch = _props3.dispatch;


      if (!validators && !errorValidators) return modelValue;

      var fieldValidity = (0, _utils.getValidity)(validators, modelValue);
      var fieldErrors = (0, _utils.getValidity)(errorValidators, modelValue);

      var errors = validators ? (0, _merge2.default)((0, _utils.invertValidity)(fieldValidity), fieldErrors) : fieldErrors;

      if (!(0, _shallowEqual2.default)(errors, fieldValue.errors)) {
        dispatch(_actions2.default.setErrors(model, errors));
      }

      return modelValue;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props4 = this.props;
      var _props4$controlProps = _props4.controlProps;
      var controlProps = _props4$controlProps === undefined ? {} : _props4$controlProps;
      var component = _props4.component;
      var control = _props4.control;


      var allowedProps = (0, _omit2.default)(this.state.mappedProps, Object.keys(Control.propTypes));

      // If there is an existing control, clone it
      if (control) {
        return (0, _react.cloneElement)(control, _extends({}, allowedProps, {
          onKeyPress: this.handleKeyPress
        }));
      }

      return (0, _react.createElement)(component, _extends({}, controlProps, allowedProps, {
        onKeyPress: this.handleKeyPress
      }), controlProps.children);
    }
  }]);

  return Control;
}(_react.Component);

Control.propTypes = {
  model: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
  control: _react.PropTypes.any,
  onLoad: _react.PropTypes.func,
  onSubmit: _react.PropTypes.func,
  modelValue: _react.PropTypes.any,
  fieldValue: _react.PropTypes.object,
  mapProps: _react.PropTypes.func,
  changeAction: _react.PropTypes.func,
  updateOn: _react.PropTypes.string,
  validateOn: _react.PropTypes.string,
  validators: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.object]),
  asyncValidateOn: _react.PropTypes.string,
  asyncValidators: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.object]),
  errors: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.object]),
  controlProps: _react.PropTypes.object,
  component: _react.PropTypes.any,
  dispatch: _react.PropTypes.func,
  parser: _react.PropTypes.func,
  componentMap: _react.PropTypes.object
};

Control.defaultProps = {
  changeAction: _actions2.default.change,
  updateOn: 'change'
};

exports.default = (0, _connect2.default)(mapStateToProps)(Control);