'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _shallowCompare = require('react/lib/shallowCompare');

var _shallowCompare2 = _interopRequireDefault(_shallowCompare);

var _connect = require('react-redux/lib/components/connect');

var _connect2 = _interopRequireDefault(_connect);

var _shallowEqual = require('../utils/shallow-equal');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

var _get2 = require('../utils/get');

var _get3 = _interopRequireDefault(_get2);

var _mapValues = require('../utils/map-values');

var _mapValues2 = _interopRequireDefault(_mapValues);

var _merge = require('../utils/merge');

var _merge2 = _interopRequireDefault(_merge);

var _identity = require('lodash/identity');

var _identity2 = _interopRequireDefault(_identity);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _actions = require('../actions');

var _actions2 = _interopRequireDefault(_actions);

var _utils = require('../utils');

var _formReducer = require('../reducers/form-reducer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Form = function (_Component) {
  _inherits(Form, _Component);

  function Form(props) {
    _classCallCheck(this, Form);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Form).call(this, props));

    _this.handleSubmit = _this.handleSubmit.bind(_this);
    _this.handleReset = _this.handleReset.bind(_this);
    _this.handleValidSubmit = _this.handleValidSubmit.bind(_this);
    _this.handleInvalidSubmit = _this.handleInvalidSubmit.bind(_this);
    _this.attachNode = _this.attachNode.bind(_this);
    return _this;
  }

  _createClass(Form, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.validate(this.props, true);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var validateOn = this.props.validateOn;


      if (validateOn !== 'change') return;

      this.validate(nextProps);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shallowCompare2.default)(this, nextProps, nextState);
    }
  }, {
    key: 'attachNode',
    value: function attachNode(node) {
      if (!node) return;

      this._node = node;

      this._node.submit = this.handleSubmit;
    }
  }, {
    key: 'validate',
    value: function validate(nextProps) {
      var initial = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
      var _props = this.props;
      var validators = _props.validators;
      var errors = _props.errors;
      var model = _props.model;
      var dispatch = _props.dispatch;
      var formValue = _props.formValue;
      var modelValue = _props.modelValue;


      if (!formValue) return;

      if (!validators && !errors && modelValue !== nextProps.modelValue) {
        if (!formValue.valid) {
          dispatch(_actions2.default.setValidity(model, true));
        }

        return;
      }

      var validityChanged = false;

      var fieldsValidity = (0, _mapValues2.default)(validators, function (validator, field) {
        var nextValue = field ? (0, _get3.default)(nextProps.modelValue, field) : nextProps.modelValue;

        var currentValue = field ? (0, _get3.default)(modelValue, field) : modelValue;

        var currentValidity = (0, _formReducer.getField)(formValue, field).validity;

        if (!initial && nextValue === currentValue) {
          return currentValidity;
        }

        var fieldValidity = (0, _utils.getValidity)(validator, nextValue);

        if (!(0, _shallowEqual2.default)(fieldValidity, currentValidity)) {
          validityChanged = true;
        }

        return fieldValidity;
      });

      var fieldsErrorsValidity = (0, _mapValues2.default)(errors, function (errorValidator, field) {
        var nextValue = field ? (0, _get3.default)(nextProps.modelValue, field) : nextProps.modelValue;

        var currentValue = field ? (0, _get3.default)(modelValue, field) : modelValue;

        var currentErrors = (0, _formReducer.getField)(formValue, field).errors;

        if (!initial && nextValue === currentValue) {
          return (0, _formReducer.getField)(formValue, field).errors;
        }

        var fieldErrors = (0, _utils.getValidity)(errorValidator, nextValue);

        if (!(0, _shallowEqual2.default)(fieldErrors, currentErrors)) {
          validityChanged = true;
        }

        return fieldErrors;
      });

      var fieldsErrors = (0, _merge2.default)((0, _utils.invertValidity)(fieldsValidity), fieldsErrorsValidity);

      // Compute form-level validity
      if (!fieldsValidity.hasOwnProperty('') && !fieldsErrorsValidity.hasOwnProperty('')) {
        fieldsErrors[''] = false;
      }

      if (validityChanged) {
        dispatch(_actions2.default.setFieldsErrors(model, fieldsErrors));
      }
    }
  }, {
    key: 'handleValidSubmit',
    value: function handleValidSubmit() {
      var _props2 = this.props;
      var dispatch = _props2.dispatch;
      var model = _props2.model;
      var modelValue = _props2.modelValue;
      var _props2$onSubmit = _props2.onSubmit;
      var onSubmit = _props2$onSubmit === undefined ? _identity2.default : _props2$onSubmit;


      dispatch(_actions2.default.setPending(model));

      return onSubmit(modelValue);
    }
  }, {
    key: 'handleInvalidSubmit',
    value: function handleInvalidSubmit() {
      var _props3 = this.props;
      var dispatch = _props3.dispatch;
      var model = _props3.model;


      dispatch(_actions2.default.setSubmitFailed(model));
    }
  }, {
    key: 'handleReset',
    value: function handleReset(e) {
      if (e) e.preventDefault();

      var _props4 = this.props;
      var model = _props4.model;
      var dispatch = _props4.dispatch;


      dispatch(_actions2.default.reset(model));
    }
  }, {
    key: 'handleSubmit',
    value: function handleSubmit(e) {
      if (e) e.preventDefault();

      var _props5 = this.props;
      var model = _props5.model;
      var modelValue = _props5.modelValue;
      var formValue = _props5.formValue;
      var onSubmit = _props5.onSubmit;
      var dispatch = _props5.dispatch;
      var validators = _props5.validators;
      var errorValidators = _props5.errors;


      var formValid = formValue ? formValue.valid : true;

      if (!validators && onSubmit && formValid) {
        onSubmit(modelValue);

        return modelValue;
      }

      var validationOptions = {
        onValid: this.handleValidSubmit,
        onInvalid: this.handleInvalidSubmit
      };

      var finalErrorValidators = validators ? (0, _merge2.default)((0, _utils.invertValidators)(validators), errorValidators) : errorValidators;

      dispatch(_actions2.default.validateFieldsErrors(model, finalErrorValidators, validationOptions));

      return modelValue;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props6 = this.props;
      var component = _props6.component;
      var children = _props6.children;


      var allowedProps = (0, _omit2.default)(this.props, Object.keys(Form.propTypes));

      return _react2.default.createElement(component, _extends({}, allowedProps, {
        onSubmit: this.handleSubmit,
        onReset: this.handleReset,
        ref: this.attachNode
      }), children);
    }
  }]);

  return Form;
}(_react.Component);

Form.propTypes = {
  component: _react.PropTypes.any,
  validators: _react.PropTypes.object,
  errors: _react.PropTypes.object,
  validateOn: _react.PropTypes.oneOf(['change', 'submit']),
  model: _react.PropTypes.string.isRequired,
  modelValue: _react.PropTypes.any,
  formValue: _react.PropTypes.object,
  onSubmit: _react.PropTypes.func,
  dispatch: _react.PropTypes.func,
  children: _react.PropTypes.node
};

Form.defaultProps = {
  validateOn: 'change',
  component: 'form'
};

function mapStateToProps(state, _ref) {
  var model = _ref.model;

  var modelString = typeof model === 'function' ? model(state) : model;

  return {
    modelValue: (0, _get3.default)(state, modelString),
    formValue: (0, _utils.getForm)(state, modelString)
  };
}

exports.default = (0, _connect2.default)(mapStateToProps)(Form);