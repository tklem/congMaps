'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.track = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _findKey = require('lodash/findKey');

var _findKey2 = _interopRequireDefault(_findKey);

var _get2 = require('../utils/get');

var _get3 = _interopRequireDefault(_get2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function track(model, predicate) {
  return function (state) {
    var _model$split = model.split(/\[\]\.?/);

    var _model$split2 = _slicedToArray(_model$split, 2);

    var parentModelPath = _model$split2[0];
    var _model$split2$ = _model$split2[1];
    var childModelPath = _model$split2$ === undefined ? '' : _model$split2$;

    var parentValue = (0, _get3.default)(state, parentModelPath);

    return [parentModelPath, (0, _findKey2.default)(parentValue, predicate), childModelPath].filter(function (path) {
      return !!path;
    }).join('.');
  };
}

exports.track = track;