'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Form = exports.Field = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _formComponent = require('../components/form-component');

var _formComponent2 = _interopRequireDefault(_formComponent);

var _fieldComponent = require('../components/field-component');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var View = process.env.NODE_ENV !== 'test' ? require('react-native').View : 'div';

var NativeField = (0, _fieldComponent.createFieldClass)({
  MapView: function MapView(props) {
    return {
      onRegionChange: props.onChange,
      onRegionChangeComplete: props.onBlur,
      region: props.modelValue
    };
  },
  Picker: function Picker(props) {
    return {
      onValueChange: props.onChange,
      selectedValue: props.modelValue
    };
  },
  Switch: function Switch(props) {
    return {
      onValueChange: props.onChange
    };
  },
  TextInput: function TextInput(props) {
    return {
      defaultValue: props.modelValue,
      onChangeText: props.onChange,
      onBlur: props.onBlur,
      onFocus: props.onFocus
    };
  },
  DatePickerIOS: function DatePickerIOS(props) {
    return {
      date: props.modelValue,
      onDateChange: props.onChange
    };
  },
  PickerIOS: function PickerIOS(props) {
    return {
      onValueChange: props.onChange,
      selectedValue: props.modelValue
    };
  },
  SegmentedControlIOS: function SegmentedControlIOS(props) {
    return {
      onValueChange: props.onChange,
      selectedIndex: props.values.indexOf(props.modelValue)
    };
  },
  SliderIOS: function SliderIOS(props) {
    return {
      onSlidingComplete: props.onBlur,
      onValueChange: props.onChange,
      value: props.modelValue
    };
  }
}, {
  component: View
});

var NativeForm = function (_React$Component) {
  _inherits(NativeForm, _React$Component);

  function NativeForm() {
    _classCallCheck(this, NativeForm);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(NativeForm).apply(this, arguments));
  }

  _createClass(NativeForm, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_formComponent2.default, _extends({
        component: View
      }, this.props));
    }
  }]);

  return NativeForm;
}(_react2.default.Component);

exports.Field = NativeField;
exports.Form = NativeForm;