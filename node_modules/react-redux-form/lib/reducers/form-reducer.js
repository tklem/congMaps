'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getField = exports.initialFormState = exports.initialFieldState = exports.createFormReducer = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _get2 = require('../utils/get');

var _get3 = _interopRequireDefault(_get2);

var _every = require('lodash/every');

var _every2 = _interopRequireDefault(_every);

var _icepick = require('icepick');

var _icepick2 = _interopRequireDefault(_icepick);

var _isBoolean = require('lodash/isBoolean');

var _isBoolean2 = _interopRequireDefault(_isBoolean);

var _arraysEqual = require('../utils/arrays-equal');

var _arraysEqual2 = _interopRequireDefault(_arraysEqual);

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _map = require('lodash/map');

var _map2 = _interopRequireDefault(_map);

var _mapValues = require('../utils/map-values');

var _mapValues2 = _interopRequireDefault(_mapValues);

var _toPath = require('../utils/to-path');

var _toPath2 = _interopRequireDefault(_toPath);

var _pathStartsWith = require('../utils/path-starts-with');

var _pathStartsWith2 = _interopRequireDefault(_pathStartsWith);

var _flatten = require('../utils/flatten');

var _flatten2 = _interopRequireDefault(_flatten);

var _actionTypes = require('../action-types');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

var _fieldActions = require('../actions/field-actions');

var _fieldActions2 = _interopRequireDefault(_fieldActions);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialFieldState = {
  blur: true, // will be deprecated
  dirty: false, // will be deprecated
  focus: false,
  pending: false,
  pristine: true,
  submitted: false,
  submitFailed: false,
  retouched: false,
  touched: false,
  untouched: true, // will be deprecated
  valid: true,
  validating: false,
  validated: false,
  viewValue: null,
  array: false,
  validity: {},
  errors: {}
};

var initialFormState = _extends({}, initialFieldState, {
  fields: {}
});

function getField(state, path) {
  if (!(0, _isPlainObject2.default)(state) || !state.fields) {
    throw new Error('Error when trying to retrieve field \'' + path + ' from an invalid/empty form state. Must pass in a valid form state as the first argument.');
  }

  var localPath = typeof path === 'function' ? path(state) : (0, _toPath2.default)(path);

  if (!localPath.length) {
    return state;
  }

  return (0, _get3.default)(state, ['fields', localPath.join('.')], initialFieldState);
}

function setField(state, localPath, props) {
  if (!localPath.length) {
    return _icepick2.default.merge(state, props);
  }

  return _icepick2.default.merge(state, {
    fields: _defineProperty({}, localPath.join('.'), _extends({}, getField(state, localPath), props))
  });
}

function setInField(state, localPath, props) {
  if (!localPath.length) {
    return _icepick2.default.assign(state, props);
  }

  var field = getField(state, localPath);

  return _icepick2.default.setIn(state, ['fields', localPath.join('.')], _icepick2.default.assign(field, props));
}

function resetField(state, localPath) {
  return _icepick2.default.setIn(state, ['fields', localPath.join('.')], initialFieldState);
}

function formIsValid(formState) {
  return (0, _every2.default)((0, _mapValues2.default)(formState.fields, function (field) {
    return field.valid;
  })) && (0, _every2.default)(formState.errors, function (error) {
    return !error;
  });
}

function createInitialFormState(model, initialState) {
  var formState = _icepick2.default.set(initialFormState, 'model', model);

  if (initialState) {
    return _icepick2.default.set(formState, 'fields', (0, _mapValues2.default)((0, _flatten2.default)(initialState), function (initialValue) {
      return _icepick2.default.set(initialFieldState, 'initialValue', initialValue);
    }));
  }

  return formState;
}

function _createFormReducer(model, initialState) {
  var modelPath = (0, _toPath2.default)(model);
  var localInitialFormState = createInitialFormState(model, initialState);

  var formReducer = function formReducer() {
    var state = arguments.length <= 0 || arguments[0] === undefined ? localInitialFormState : arguments[0];
    var action = arguments[1];

    if (!action.model) {
      return state;
    }

    var path = (0, _toPath2.default)(action.model);

    if (!(0, _arraysEqual2.default)(path.slice(0, modelPath.length), modelPath)) {
      return state;
    }

    var localPath = path.slice(modelPath.length);
    var errors = void 0;
    var validity = void 0;

    switch (action.type) {
      case _actionTypes2.default.BATCH:
        return action.actions.reduce(formReducer, state);

      case _actionTypes2.default.FOCUS:
        return setField(state, localPath, {
          blur: false, // will be deprecated
          focus: true,
          array: Array.isArray(action.value)
        });

      case _actionTypes2.default.CHANGE:
        {
          var _ret = function () {
            if (action.silent) return {
                v: state
              };

            var setFieldDirtyState = setField(state, localPath, {
              dirty: true, // will be deprecated
              pristine: false,
              value: action.value,
              validated: false,
              retouched: state.submitted || state.submitFailed
            });

            setFieldDirtyState = _icepick2.default.assoc(setFieldDirtyState, ['fields'], (0, _mapValues2.default)(setFieldDirtyState.fields, function (field, fieldKey) {
              return (0, _pathStartsWith2.default)(fieldKey, localPath) ? _icepick2.default.merge(field, { validated: false }) : field;
            }));

            if (action.removeKeys) {
              (function () {
                var persistKeys = [];

                var removeKeys = Object.keys(state.fields).filter(function (fieldKey) {
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = undefined;

                  try {
                    for (var _iterator = action.removeKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var removeKey = _step.value;

                      var removeKeyPath = localPath.concat(removeKey);
                      if ((0, _pathStartsWith2.default)(fieldKey, removeKeyPath)) return true;
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }

                  if ((0, _pathStartsWith2.default)(fieldKey, localPath)) {
                    persistKeys.push(fieldKey);
                  }

                  return false;
                });

                removeKeys.forEach(function (removeKey) {
                  setFieldDirtyState = _icepick2.default.updateIn(setFieldDirtyState, ['fields'], function (field) {
                    return _icepick2.default.dissoc(field, removeKey);
                  });
                });

                var persistKeysIndexMapping = {};
                var nextIndex = -1;

                // Note: this code is really hairy but will be
                // completely refactored in V1.0.
                persistKeys.forEach(function (persistKey) {
                  var newPersistKeyPath = (0, _toPath2.default)(persistKey);
                  var currentIndex = newPersistKeyPath[localPath.length];
                  var mappedIndex = persistKeysIndexMapping[currentIndex];

                  if (typeof mappedIndex !== 'undefined') {
                    newPersistKeyPath[localPath.length] = mappedIndex;
                  } else {
                    newPersistKeyPath[localPath.length] = persistKeysIndexMapping[currentIndex] = ++nextIndex;
                  }

                  var persistField = getField(state, persistKey);

                  // Remove old key
                  setFieldDirtyState = _icepick2.default.updateIn(setFieldDirtyState, ['fields'], function (field) {
                    return _icepick2.default.dissoc(field, persistKey);
                  });

                  // Update field to new key
                  setFieldDirtyState = setInField(setFieldDirtyState, newPersistKeyPath, persistField);
                });
              })();
            }

            return {
              v: _icepick2.default.merge(setFieldDirtyState, {
                dirty: true, // will be deprecated
                pristine: false,
                valid: formIsValid(setFieldDirtyState),
                retouched: state.submitted || state.submitFailed
              })
            };
          }();

          if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
        }

      case _actionTypes2.default.SET_DIRTY:
        {
          var setDirtyState = _icepick2.default.merge(state, {
            dirty: true, // will be deprecated
            pristine: false
          });

          return setField(setDirtyState, localPath, {
            dirty: true, // will be deprecated
            pristine: false
          });
        }

      case _actionTypes2.default.BLUR:
      case _actionTypes2.default.SET_TOUCHED:
        {
          var fieldState = setField(state, localPath, {
            focus: false,
            touched: true,
            blur: true, // will be deprecated
            retouched: state.submitted || state.submitFailed,
            untouched: false });

          // will be deprecated
          return _icepick2.default.merge(fieldState, {
            touched: true,
            retouched: state.submitted || state.submitFailed,
            untouched: false });
        }

      // will be deprecated
      case _actionTypes2.default.SET_PENDING:
        return setField(state, localPath, {
          pending: action.pending,
          submitted: false,
          submitFailed: false,
          retouched: false
        });

      case _actionTypes2.default.SET_VALIDITY:
        {
          if ((0, _isPlainObject2.default)(action.validity)) {
            errors = (0, _mapValues2.default)(action.validity, function (valid) {
              return !valid;
            });
          } else {
            errors = !action.validity;
          }

          var formIsValidState = setInField(state, localPath, {
            errors: errors,
            validity: action.validity,
            valid: (0, _isBoolean2.default)(errors) ? !errors : (0, _every2.default)(errors, function (error) {
              return !error;
            }),
            validated: true
          });

          return _icepick2.default.merge(formIsValidState, {
            valid: formIsValid(formIsValidState)
          });
        }

      case _actionTypes2.default.SET_FIELDS_VALIDITY:
        return (0, _map2.default)(action.fieldsValidity, function (fieldValidity, field) {
          return _fieldActions2.default.setValidity(field.length ? model + '.' + field : model, fieldValidity, action.options);
        }).reduce(formReducer, state);

      case _actionTypes2.default.SET_ERRORS:
        {
          if ((0, _isPlainObject2.default)(action.errors)) {
            validity = (0, _mapValues2.default)(action.errors, function (error) {
              return !error;
            });
          } else {
            validity = !action.errors;
          }

          var setErrorsState = setInField(state, localPath, {
            errors: action.errors,
            validity: validity,
            valid: (0, _utils.isValid)(validity),
            validated: true
          });

          return _icepick2.default.merge(setErrorsState, {
            valid: formIsValid(setErrorsState)
          });
        }

      case _actionTypes2.default.RESET_VALIDITY:
        {
          var _ret3 = function () {
            var resetValidityState = void 0;
            if (!localPath.length) {
              resetValidityState = _icepick2.default.setIn(state, ['valid'], true);

              resetValidityState = _icepick2.default.setIn(resetValidityState, ['validity'], initialFieldState.validity);

              resetValidityState = _icepick2.default.setIn(resetValidityState, ['errors'], initialFieldState.errors);

              Object.keys(resetValidityState.fields).forEach(function (field) {
                resetValidityState = _icepick2.default.setIn(resetValidityState, ['fields', field, 'valid'], true);

                resetValidityState = _icepick2.default.setIn(resetValidityState, ['fields', field, 'validity'], initialFieldState.validity);

                resetValidityState = _icepick2.default.setIn(resetValidityState, ['fields', field, 'errors'], initialFieldState.errors);
              });
            } else {
              resetValidityState = _icepick2.default.setIn(state, ['fields', localPath.join('.'), 'valid'], true);

              resetValidityState = _icepick2.default.setIn(resetValidityState, ['fields', localPath.join('.'), 'validity'], initialFieldState.validity);

              resetValidityState = _icepick2.default.setIn(resetValidityState, ['fields', localPath.join('.'), 'errors'], initialFieldState.errors);
            }

            return {
              v: _icepick2.default.merge(resetValidityState, {
                valid: formIsValid(resetValidityState)
              })
            };
          }();

          if ((typeof _ret3 === 'undefined' ? 'undefined' : _typeof(_ret3)) === "object") return _ret3.v;
        }

      case _actionTypes2.default.SET_PRISTINE:
        {
          var formIsPristine = void 0;
          var setPristineState = void 0;

          if (!localPath.length) {
            formIsPristine = true;

            setPristineState = _icepick2.default.merge(state, {
              fields: (0, _mapValues2.default)(state.fields, function (field) {
                return _extends({}, field, {
                  dirty: false, // will be deprecated
                  pristine: true
                });
              })
            });
          } else {
            setPristineState = setField(state, localPath, {
              dirty: false, // will be deprecated
              pristine: true
            });

            formIsPristine = (0, _every2.default)((0, _mapValues2.default)(setPristineState.fields, function (field) {
              return field.pristine;
            }));
          }

          return _icepick2.default.merge(setPristineState, {
            dirty: !formIsPristine, // will be deprecated
            pristine: formIsPristine
          });
        }

      case _actionTypes2.default.SET_UNTOUCHED:
        return setField(state, localPath, {
          touched: false,
          untouched: true });

      // will be deprecated
      case _actionTypes2.default.SET_SUBMITTED:
        {
          var _ret4 = function () {
            var submittedState = {
              pending: false,
              submitted: !!action.submitted,
              submitFailed: false,
              touched: true,
              untouched: false };

            // will be deprecated
            if (!localPath.length) {
              return {
                v: _icepick2.default.merge(state, _extends({}, submittedState, {
                  fields: (0, _mapValues2.default)(state.fields, function (field) {
                    return _icepick2.default.merge(field, submittedState);
                  })
                }))
              };
            }

            return {
              v: setField(state, localPath, submittedState)
            };
          }();

          if ((typeof _ret4 === 'undefined' ? 'undefined' : _typeof(_ret4)) === "object") return _ret4.v;
        }

      case _actionTypes2.default.SET_SUBMIT_FAILED:
        {
          var _ret5 = function () {
            var submitFailedState = {
              pending: false,
              submitted: false,
              submitFailed: true,
              touched: true,
              untouched: false
            };

            if (!localPath.length) {
              return {
                v: _icepick2.default.merge(state, _extends({}, submitFailedState, {
                  fields: (0, _mapValues2.default)(state.fields, function (field) {
                    return _icepick2.default.merge(field, submitFailedState);
                  })
                }))
              };
            }

            return {
              v: setField(state, localPath, submitFailedState)
            };
          }();

          if ((typeof _ret5 === 'undefined' ? 'undefined' : _typeof(_ret5)) === "object") return _ret5.v;
        }

      case _actionTypes2.default.SET_INITIAL:
      case _actionTypes2.default.RESET:
        if (!localPath.length) {
          return localInitialFormState;
        }

        return resetField(state, localPath);

      case _actionTypes2.default.SET_VIEW_VALUE:
        return setField(state, localPath, {
          viewValue: action.value
        });

      default:
        return state;
    }
  };

  return formReducer;
}

function createFormReducer() {
  console.warn('The createFormReducer() function is deprecated (renamed). ' + 'Please use formReducer().');
  /* eslint-disable */
  return _createformReducer.apply(undefined, arguments);
  /* eslint-enable */
}

exports.createFormReducer = createFormReducer;
exports.initialFieldState = initialFieldState;
exports.initialFormState = initialFormState;
exports.getField = getField;
exports.default = _createFormReducer;