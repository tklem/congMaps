'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initialFieldState = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _reactions;

exports.getField = getField;
exports.default = createFormReducer;

var _get2 = require('../utils/get');

var _get3 = _interopRequireDefault(_get2);

var _every = require('lodash/every');

var _every2 = _interopRequireDefault(_every);

var _icepick = require('icepick');

var _icepick2 = _interopRequireDefault(_icepick);

var _isBoolean = require('lodash/isBoolean');

var _isBoolean2 = _interopRequireDefault(_isBoolean);

var _arraysEqual = require('../utils/arrays-equal');

var _arraysEqual2 = _interopRequireDefault(_arraysEqual);

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _map = require('lodash/map');

var _map2 = _interopRequireDefault(_map);

var _mapValues = require('../utils/map-values');

var _mapValues2 = _interopRequireDefault(_mapValues);

var _compareKeys = require('../utils/compare-keys');

var _compareKeys2 = _interopRequireDefault(_compareKeys);

var _toPath3 = require('../utils/to-path');

var _toPath4 = _interopRequireDefault(_toPath3);

var _pathStartsWith = require('../utils/path-starts-with');

var _pathStartsWith2 = _interopRequireDefault(_pathStartsWith);

var _compose = require('redux/lib/compose');

var _compose2 = _interopRequireDefault(_compose);

var _composeReducers = require('../utils/compose-reducers');

var _composeReducers2 = _interopRequireDefault(_composeReducers);

var _identity = require('lodash/identity');

var _identity2 = _interopRequireDefault(_identity);

var _actionTypes = require('../action-types');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

var _fieldActions = require('../actions/field-actions');

var _fieldActions2 = _interopRequireDefault(_fieldActions);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /* eslint-disable */


var initialFieldState = exports.initialFieldState = {
  focus: false,
  pending: false,
  pristine: true,
  submitted: false,
  submitFailed: false,
  retouched: false,
  touched: false,
  valid: true,
  validating: false,
  validated: false,
  viewValue: null,
  validity: {},
  errors: {}
};

function getField(state, path) {
  if (process.env.NODE_ENV !== 'production') {
    if (!(0, _isPlainObject2.default)(state)) {
      throw new Error('Could not retrieve field \'' + path + '\' ' + 'from an invalid/empty form state.');
    }
  }

  return (0, _get3.default)(state, path, initialFieldState);
}

function createInitialState(state, initialValue) {
  var initialState = void 0;

  if ((0, _isArray2.default)(state)) {
    initialState = state.map(createInitialState);
  } else if ((0, _isPlainObject2.default)(state)) {
    initialState = (0, _mapValues2.default)(state, createInitialState);
  } else {
    return _icepick2.default.merge(initialFieldState, {
      initialValue: state
    });
  }

  initialState.$form = _icepick2.default.merge(initialFieldState, {
    initialValue: state
  });

  return initialState;
}

function formIsValid(formState) {
  console.log(formState);
  return (0, _every2.default)((0, _mapValues2.default)(formState, function (field) {
    return field.valid;
  })) && (0, _every2.default)(formState.$form.errors, function (error) {
    return !error;
  });
}

function inverse(value) {
  return !value;
}

var reactions = (_reactions = {}, _defineProperty(_reactions, _actionTypes2.default.FOCUS, {
  form: function form() {
    return { focus: true };
  },
  field: function field() {
    return { focus: true };
  }
}), _defineProperty(_reactions, _actionTypes2.default.SET_PRISTINE, {
  form: function form() {
    return { pristine: true };
  },
  field: function field() {
    return { pristine: true };
  }
}), _defineProperty(_reactions, _actionTypes2.default.SET_DIRTY, {
  form: function form() {
    return { pristine: false };
  },
  field: function field() {
    return { pristine: false };
  }
}), _defineProperty(_reactions, _actionTypes2.default.BLUR, function (state, action) {
  return {
    form: function form(_form) {
      return {
        focus: false,
        touched: true,
        retouched: !!(_form.submitted || _form.submitFailed),
        submitted: _form.submitted
      };
    },
    field: function field(_, form) {
      return {
        focus: false,
        touched: true,
        retouched: !!(form.submitted || form.submitFailed)
      };
    }
  };
}), _defineProperty(_reactions, _actionTypes2.default.SET_TOUCHED, function (state, action) {
  return reactions[_actionTypes2.default.BLUR](action, state);
}), _defineProperty(_reactions, _actionTypes2.default.SET_UNTOUCHED, {
  form: function form(state) {
    return state;
  },
  field: function field() {
    return {
      touched: false
    };
  }
}), _defineProperty(_reactions, _actionTypes2.default.SET_PENDING, function (_, action) {
  return {
    form: function form() {
      return {
        pending: action.pending,
        retouched: false
      };
    },
    field: function field() {
      return {
        pending: action.pending,
        submitted: false,
        submitFailed: false,
        retouched: false
      };
    }
  };
}), _defineProperty(_reactions, _actionTypes2.default.SET_VALIDITY, function (_, action) {
  var errors = (0, _isPlainObject2.default)(action.validity) ? (0, _mapValues2.default)(action.validity, inverse) : !action.validity;

  return {
    form: function form(_, formFields) {
      return {
        valid: formIsValid(formFields)
      };
    },
    field: function field() {
      return {
        validity: action.validity,
        valid: (0, _isBoolean2.default)(errors) ? !errors : (0, _every2.default)(errors, function (error) {
          return !error;
        }),
        errors: errors,
        validated: true
      };
    }
  };
}), _defineProperty(_reactions, _actionTypes2.default.SET_ERRORS, function (_, action) {
  var validity = (0, _isPlainObject2.default)(action.errors) ? (0, _mapValues2.default)(action.errors, inverse) : !action.errors;

  return {
    form: function form(_, fields) {
      return {
        valid: formIsValid(fields)
      };
    },
    field: function field() {
      return {
        errors: action.errors,
        validity: validity,
        valid: (0, _utils.isValid)(validity),
        validated: true
      };
    }
  };
}), _defineProperty(_reactions, _actionTypes2.default.SET_SUBMITTED, function (_, action) {
  return {
    form: function form() {
      return {
        touched: true
      };
    },
    field: function field() {
      return {
        pending: false,
        submitted: !!action.submitted,
        submitFailed: !action.submitted,
        touched: true,
        retouched: false
      };
    }
  };
}), _defineProperty(_reactions, _actionTypes2.default.SET_SUBMIT_FAILED, function (_, action) {
  return {
    form: function form() {
      return {
        touched: true
      };
    },
    field: function field(_field) {
      return {
        pending: false,
        submitted: _field.submitted && !action.submitFailed,
        submitFailed: !!action.submitFailed,
        touched: true,
        retouched: false
      };
    },
    subField: function subField(_subField) {
      return {
        submitFailed: !!action.submitFailed,
        submitted: _subField.submitted && !action.submitFailed,
        touched: true,
        retouched: false
      };
    }
  };
}), _reactions);

function getReaction(state, action) {
  var reaction = reactions[action.type];

  if (!reaction) return false;

  if (typeof reaction === 'function') {
    return reaction(state, action);
  }

  return reaction;
}

function mapFields(state, iterator) {
  var result = (0, _mapValues2.default)(state, function (field, fieldName) {
    if (fieldName === '$form') return field;

    return iterator(field, state);
  });

  delete result.$form;

  return result;
}

function formActionReducer(state, action, _path) {
  var reaction = getReaction(state, action);

  var _reaction$form = reaction.form;
  var formReaction = _reaction$form === undefined ? _identity2.default : _reaction$form;
  var _reaction$field = reaction.field;
  var fieldReaction = _reaction$field === undefined ? _identity2.default : _reaction$field;
  var _reaction$subField = reaction.subField;
  var subFieldReaction = _reaction$subField === undefined ? _identity2.default : _reaction$subField;


  if (!reaction) return state;

  var fieldFormPath = (0, _toPath4.default)(_path).slice(0, -1).concat(['$form']);
  var fieldFormState = (0, _get3.default)(state, fieldFormPath);

  function recurse() {
    var subState = arguments.length <= 0 || arguments[0] === undefined ? initialFieldState : arguments[0];
    var path = arguments[1];

    var _toPath = (0, _toPath4.default)(path);

    var _toPath2 = _toArray(_toPath);

    var _toPath2$ = _toPath2[0];
    var parentKey = _toPath2$ === undefined ? false : _toPath2$;

    var childPath = _toPath2.slice(1);

    if (!parentKey && !childPath.length) {
      if (subState.hasOwnProperty('$form')) {
        return _icepick2.default.merge(subState, _extends({
          $form: _icepick2.default.merge(subState.$form, fieldReaction(subState.$form, fieldFormState))
        }, mapFields(subState, function (subField) {
          return _icepick2.default.merge(subField, subFieldReaction(subField, fieldFormState));
        })));
      }

      return _icepick2.default.merge(subState, fieldReaction(subState, fieldFormState));
    }

    var subFieldState = _icepick2.default.merge(subState, _defineProperty({}, parentKey, recurse(subState[parentKey], childPath)));

    return _icepick2.default.merge(subFieldState, {
      $form: _icepick2.default.merge(subFieldState.$form, formReaction(subFieldState.$form, subFieldState))
    });
  }

  return recurse(state, _path);
}

function createFormReducer(model) {
  var initialState = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var plugins = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

  var modelPath = (0, _toPath4.default)(model);
  var initialFormState = createInitialState(initialState);

  var formReducer = function formReducer() {
    var state = arguments.length <= 0 || arguments[0] === undefined ? initialFormState : arguments[0];
    var action = arguments[1];

    if (!action.model) return state;

    var path = (0, _toPath4.default)(action.model);

    if (!(0, _arraysEqual2.default)(path.slice(0, modelPath.length), modelPath)) {
      return state;
    }

    var localPath = path.slice(modelPath.length);

    return formActionReducer(state, action, localPath);
  };
  return formReducer;
  return _composeReducers2.default.apply(undefined, _toConsumableArray(plugins).concat([formReducer]));
}
/* eslint-enable */